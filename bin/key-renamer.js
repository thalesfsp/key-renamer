const util=require("util"),mergeRecursive=function(e,n){for(let o in n)try{n[o].constructor===Object?e[o]=mergeRecursive(e[o],n[o]):e[o]=n[o]}catch(t){e[o]=n[o]}return e},logDebug=function(e,n,o){console.log("Original key: ",e),console.log("New key: ",util.inspect(n,{showHidden:!0,depth:3})),console.log("Key value: ",o),console.log("")},keyRenamer=function(originalObject,map,debug){let updatedObject={},newKey,value;debug&&(console.log("Original object:",util.inspect(originalObject,{showHidden:!0,depth:10,colors:!0})),console.log(""),console.log("Map object:",util.inspect(map,{showHidden:!0,depth:3})),console.log(""));try{Object.keys(originalObject).forEach((function(key){var tempKey={};newKey=map[key]||key,-1!==newKey.indexOf(":")&&-1!==newKey.indexOf("$value")?(value=originalObject[key],value&&"Number"!==value.constructor.name&&"Boolean"!==value.constructor.name&&(value=JSON.stringify(value)),newKey=newKey.replace("$value",value),eval("var tempKey = "+newKey),value&&"Object"===value.constructor.name&&(value=keyRenamer(value,map)),debug&&logDebug(key,tempKey,value),mergeRecursive(updatedObject,tempKey)):(value=originalObject[key],debug&&logDebug(key,newKey,value),value&&"Object"===value.constructor.name&&(value=keyRenamer(value,map)),updatedObject[newKey]=value)}))}catch(e){throw new Error(`Failed to conform data:\nData: ${JSON.stringify(originalObject)}\nMap: ${JSON.stringify(map)}`)}return updatedObject};module.exports=keyRenamer;